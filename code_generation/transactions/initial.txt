You are to write code which defines the method "perform_task" of the NetHack Player class that selects amongst a set of skills in the videogame of NetHack. The set of skills corresponds to {{"discoverer", "descender", "ascender", "merchant", "worshipper"}}. 

When activated, the Discoverer fully explores the current dungeon, while fighting off enemies. The Descender makes its way to a staircase and goes down. The Ascender makes its way to a staircase and goes up. The Merchant interacts with shopkeepers by selling its items. The Worshipper interacts with altars by identifying its items.

Previously, you have implemented a few methods which allowed for exploration through the first few dungeon levels, as shown here:

###
{}
###

You are now faced with the task of interacting with a shopkeeper by successfully selling items.

Write the code for "perform_task" method such that the player interacts with the shopkeeper, which appears more often in the Dungeons of Doom.

You should make use of the two existing methods.  The "reach_gnomish_mines" method brings the player to the Gnomish Mines from the Dungeons of Doom. The "reach_dungeons_of_doom" method brings the player to the Dungeons of Doom from the Gnomish Mines. 

Shopkeepers only appear after dungeon depth 1 in the Dungeons of Doom, modify "merchant_precondition" accordingly.

Your code will be executed through this unit test. 

###

# Starting conditions
skill = 'discoverer'
dungeon_depth = 1
branch_number = 0

max_depth = # to be defined

# the environment decides on the branch_depth
branch_depth = 2

player = NetHackPlayer(max_depth, branch_depth)

for turn in range(20):
    print(f"Turn {{turn + 1}}: Skill = {{skill}}, Dungeon depth = {{dungeon_depth}}, Branch Number = {{branch_number}}")

    if [all conditions needed to complete the task]:
        print("Sold an item!")
        break

    merchant_precondition = player.merchant_precondition()
    worshipper_precondition = player.worshipper_precondition()

    skill = player.perform_task(skill, dungeon_depth, branch_number, merchant_precondition, worshipper_precondition)

    # the environment updates the dungeon_depth
    if skill == 'descender':
        dungeon_depth += 1
    elif skill == 'ascender':
        dungeon_depth -= 1

    # the environment modifies the branch_number when descending from branch_depth
    if skill == "descender" and dungeon_depth == branch_depth+1:
        branch_number = random.choice([0, 2])
    # If player ascends from gnomish mines, it necessarily goes back to the dungeons of doom
    elif skill == "ascender" and dungeon_depth == branch_depth and branch_number == 2:
        branch_number = 0
###

Before writing the code, write a few questions for yourself, and answer them to make sure you understand the assignment. Explain what you can and cannot control in the environment.

Clearly state what is your strategy and the output you want by running the code.

In your response make sure to include the code for the class definition and the unit test in a python markdown.