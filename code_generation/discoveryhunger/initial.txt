You are to write code which defines the method "perform_task" of the NetHack Player class that selects amongst a set of skills in the videogame of NetHack. The set of skills corresponds to {{"discoverer", "descender", "ascender", "merchant", "worshipper"}}. 

When activated, the Discoverer fully explores the current dungeon, while fighting off enemies. The Descender makes its way to a staircase and goes down. The Ascender makes its way to a staircase and goes up. The Merchant interacts with shopkeepers by selling its items. The Worshipper interacts with altars by identifying its items.

Here is your current implementation of the NetHackPlayer class:

###
{}
###

You are faced with the task following task.

Reach the oracle level, but not before discovering the Gnomish Mines and eating some food there after getting hungry.

The Oracle level is located in the Dungeons of Doom (branch number 0) and can appear as low as a depth of 9. The Gnomish Mines form a secondary branch (branch number 2) starting from branch_depth+1.

You should make use of the two existing methods.  The "reach_gnomish_mines" method brings the player to the Gnomish Mines from the Dungeons of Doom. The "reach_dungeons_of_doom" method brings the player to the Dungeons of Doom from the Gnomish Mines. 

Eating food happens by activating the Discoverer skill in the Gnomish Mines. Immediately after eating the food, head as fast as possible for the Oracle level in the Dungeons of Doom (branch number 0), without more exploration. 

Your code will be executed through this unit test. 

###

# Starting conditions
skill = 'discoverer'
dungeon_depth = 1
branch_number = 0

max_depth = # to be defined

# the environment decides on the branch_depth
branch_depth = 2

player = NetHackPlayer(max_depth, branch_depth)

for turn in range(20):
    print(f"Turn {{turn + 1}}: Skill = {{skill}}, Dungeon depth = {{dungeon_depth}}, Branch Number = {{branch_number}}")

    if [all conditions needed to complete the task]:
        print("Reached the Oracle level!")
        break

    merchant_precondition = player.merchant_precondition()
    worshipper_precondition = player.worshipper_precondition()

    skill = player.perform_task(skill, dungeon_depth, branch_number, merchant_precondition, worshipper_precondition)

    # the environment updates the dungeon_depth
    if skill == 'descender':
        dungeon_depth += 1
    elif skill == 'ascender':
        dungeon_depth -= 1

    # the environment modifies the branch_number when descending from branch_depth
    if skill == "descender" and dungeon_depth == branch_depth + 1:
        branch_number = random.choice([0, 2])
    # If player ascends from gnomish mines, it necessarily goes back to the dungeons of doom
    elif skill == "ascender" and dungeon_depth == branch_depth and branch_number == 2:
        branch_number = 0
    
    # additional method calls to update attributes go here
###

Before writing the code, write a few questions for yourself, and answer them to make sure you understand the assignment.

Identify if you need to define any additional attributes. If you define additional attributes, for each of them you must write methods that will simulate changes to their values. These methods must be called upon in the unit test (not in perform_task), as if the environment is updating them. The values should also be printed at each iteration.

In your response make sure to include the code for the class definition and the unit test in a python markdown.